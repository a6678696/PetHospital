<?xml version="1.0" encoding="UTF-8" ?>
<!--suppress ALL-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ledao.mapper.SaleListMapper">
    <resultMap id="SaleListResult" type="SaleList">
        <result property="id" column="id"/>
        <result property="saleNumber" column="saleNumber"/>
        <result property="saleDate" column="saleDate"/>
        <result property="amountPayable" column="amountPayable"/>
        <result property="amountPaid" column="amountPaid"/>
        <result property="state" column="state"/>
        <result property="remarks" column="remarks"/>
        <association property="customer" column="customerId" select="com.ledao.mapper.CustomerMapper.findById">
        </association>
        <association property="user" column="userId" select="com.ledao.mapper.UserMapper.findById">
        </association>
    </resultMap>
    <resultMap id="SaleCountResult" type="SaleCount">
        <result property="amountCost" column="amountCost"/>
        <result property="amountProfit" column="amountProfit"/>
        <result property="amountSale" column="amountSale"/>
        <result property="date" column="date"/>
    </resultMap>
    <select id="getTodayMaxSaleNumber" resultType="java.lang.String">
        select max(saleNumber)
        from t_sale_list
        where to_days(saleDate) = to_days(now())
    </select>
    <select id="countSaleByDay" parameterType="string" resultMap="SaleCountResult">
        SELECT SUM(t3.purchasingPrice * t1.num) AS amountCost,
               SUM(t1.price * t1.num)           AS amountSale,
               DATE(t2.saleDate)                AS `date`
        FROM t_sale_list_goods t1
                     LEFT JOIN t_sale_list t2 ON t1.saleListId = t2.id
                     LEFT JOIN t_goods t3 ON t3.id = t1.goodsId
        WHERE t2.state != 6
          and t2.saleDate BETWEEN #{param1} AND ADDDATE(#{param2}, 1)
        GROUP BY DATE(t2.saleDate);
    </select>
    <select id="countSaleByMonth" parameterType="string" resultMap="SaleCountResult">
        SELECT SUM(t3.purchasingPrice * t1.num)  AS amountCost,
               SUM(t1.price * t1.num)            AS amountSale,
               DATE_FORMAT(t2.saleDate, '%Y-%m') AS `date`
        FROM t_sale_list_goods t1
                     LEFT JOIN t_sale_list t2 ON t1.saleListId = t2.`id`
                     LEFT JOIN t_goods t3 ON t3.`id` = t1.goodsId
        WHERE t2.state != 6
          and DATE_FORMAT(t2.saleDate, '%Y-%m') BETWEEN #{param1} AND #{param2}
        GROUP BY DATE_FORMAT(t2.`saleDate`, '%Y-%m')
    </select>
    <select id="findById" parameterType="integer" resultMap="SaleListResult">
        select *
        from t_sale_list
        where id = #{id}
    </select>
    <insert id="add" parameterType="SaleList">
        insert into t_sale_list (amountPaid, amountPayable, remarks, saleDate, saleNumber, state, customerId, userId)
        values (#{amountPaid}, #{amountPayable}, #{remarks}, #{saleDate}, #{saleNumber}, #{state}, #{customer.id},
                #{user.id});
    </insert>
    <update id="update" parameterType="SaleList">
        update t_sale_list
        <set>
            <if test="amountPaid != null">
                amountPaid=#{amountPaid},
            </if>
            <if test="amountPayable != null">
                amountPayable=#{amountPayable},
            </if>
            <if test="remarks != null and remarks != ''">
                remarks=#{remarks},
            </if>
            <if test="saleDate != null">
                saleDate=#{saleDate},
            </if>
            <if test="saleNumber != null and saleNumber != ''">
                saleNumber=#{saleNumber},
            </if>
            <if test="state != null">
                state=#{state},
            </if>
            <if test="customer.id != null">
                customerId=#{customer.id},
            </if>
            <if test="user.id != null">
                userId=#{user.id},
            </if>
        </set>
        where id = #{id}
    </update>
    <select id="list" parameterType="map" resultMap="SaleListResult">
        select *
        from t_sale_list
        <where>
            <if test="saleNumber != null and saleNumber != ''">
                and saleNumber like #{saleNumber}
            </if>
            <if test="customer != null and customer.id != null">
                and customerId = #{customer.id}
            </if>
            <if test="state != null">
                and state = #{state}
            </if>
            <if test="bSaleDate != null">
                and date_format(saleDate, '%Y-%m-%d %H:%i:%S') &gt;= date_format(#{bSaleDate}, '%Y-%m-%d %H:%i:%S')
            </if>
            <if test="eSaleDate != null">
                and date_format(saleDate, '%Y-%m-%d %H:%i:%S') &lt;= date_format(#{eSaleDate}, '%Y-%m-%d %H:%i:%S')
            </if>
        </where>
        order by saleDate desc
        <if test="start != null and size != null">
            limit #{start},#{size}
        </if>
    </select>
    <delete id="delete" parameterType="integer">
        delete
        from t_sale_list
        where id = #{id}
    </delete>
    <select id="findBySaleNumber" parameterType="string" resultMap="SaleListResult">
        select *
        from t_sale_list
        where saleNumber = #{saleNumber}
    </select>
    <select id="findCurrentOneOrderByCustomerId" parameterType="integer" resultMap="SaleListResult">
        select *
        from t_sale_list
        <where>
            <if test="customerId != null">
                and customerId = #{customerId}
            </if>
        </where>
        order by saleDate desc
        limit 1
    </select>
    <select id="getCount" parameterType="map" resultType="java.lang.Long">
        select count(*)
        from t_sale_list
        <where>
            <if test="saleNumber != null and saleNumber != ''">
                and saleNumber like #{saleNumber}
            </if>
            <if test="customer != null and customer.id != null">
                and customerId = #{customer.id}
            </if>
            <if test="state != null">
                and state = #{state}
            </if>
            <if test="bSaleDate != null">
                and date_format(saleDate, '%Y-%m-%d %H:%i:%S') &gt;= date_format(#{bSaleDate}, '%Y-%m-%d %H:%i:%S')
            </if>
            <if test="eSaleDate != null">
                and date_format(saleDate, '%Y-%m-%d %H:%i:%S') &lt;= date_format(#{eSaleDate}, '%Y-%m-%d %H:%i:%S')
            </if>
        </where>
    </select>
    <select id="findOrderOverOneDay" resultMap="SaleListResult">
        select *
        from t_sale_list
        where DATE_ADD(now(), interval -24 hour) &gt; saleDate
          and state = 2;
    </select>
    <select id="findOrderOverTwoWeeksNotReceipt" resultMap="SaleListResult">
        select *
        from t_sale_list
        where DATE_ADD(now(), interval -14 day) &gt; saleDate
          and state = 4;
    </select>
</mapper>
